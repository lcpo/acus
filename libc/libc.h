#ifndef __DESTRUCTOR
#include "constructor.h"
#endif
#include "type.h"

typedef struct mhope{
uni a[1024];
uni z[1024];
uni i;
}mhope;

static mhope hope;

typedef struct mween{
uni a[512];
uni o[512];
uni z[512];
uni i;
}mween;

static mween ween;

typedef struct st_t{
//ctype
///---------------------------------------------------------------------
int (*isalnum)(int ch);
///---------------------------------------------------------------------
int (*isalpha)(int ch);
///---------------------------------------------------------------------
int (*iscntrl)(int ch);
///---------------------------------------------------------------------
int (*isdigit)(int ch);
///---------------------------------------------------------------------
int (*isgraph)(int ch);
///---------------------------------------------------------------------
int (*islower)(int ch);
///---------------------------------------------------------------------
int (*isprint)(int ch);
///---------------------------------------------------------------------
int (*ispunct)(int ch);
///---------------------------------------------------------------------
int (*isspace)(int ch);
//!---------------------------------------------------------------------
int (*isupper)(int ch);
//!---------------------------------------------------------------------
int (*isxdigit)(int ch);
//!---------------------------------------------------------------------
int (*tolower)(int ch);
//!---------------------------------------------------------------------
int (*toupper)(int ch);
///---------------------------------------------------------------------
//string
///---------------------------------------------------------------------
size_t (*strlen)(char *str);
///---------------------------------------------------------------------
char* (*strcpy)(char *to,char *from);
///---------------------------------------------------------------------
char* (*strncpy)(char *to,char *from, int nom);
///---------------------------------------------------------------------
char* (*strcat)(char* des, char* so );
///---------------------------------------------------------------------
char* (*strncat)(char* dst, char * src, size_t n);
///---------------------------------------------------------------------
int (*strcmp)(char *l, char *r);
///---------------------------------------------------------------------
int (*strncmp)(char* l, char* r, size_t num);
///---------------------------------------------------------------------
char* (*strchr)(char *s, int c);
///---------------------------------------------------------------------
char* (*strrchr)(char *cp, int ch);
///---------------------------------------------------------------------
int (*strspn)(char *p, char *s);
///---------------------------------------------------------------------
int (*strcspn)(char *p,char *s);
///---------------------------------------------------------------------
char* (*strpbrk)(char *s1, char *s2);
///---------------------------------------------------------------------
char* (*strstr)(char *string, char *substring);
///---------------------------------------------------------------------
//strerror(n) *TODO
///---------------------------------------------------------------------
char* (*strtok)(char *p, char *tok);
///---------------------------------------------------------------------
void* (*memcpy)(void *dest, void *src, size_t n);
///---------------------------------------------------------------------
void* (*memcat)(void *dest, void *src, size_t n);
///---------------------------------------------------------------------
void* (*memmove)(char *dest, char *src, size_t n);
///---------------------------------------------------------------------
int (*memcmp)(void *s1,  void *s2, size_t n);
///---------------------------------------------------------------------
void* (*memchr)(void *s, int c, size_t n);
///---------------------------------------------------------------------
void* (*memset)(void *s, int c, size_t n);
///---------------------------------------------------------------------
//array
size_t (*count)(void** v);
///------------------------------------------------------------
void (*free_ptr)(void* ptr);
///------------------------------------------------------------
void (*free)(void* ptr);
///------------------------------------------------------------
void* (*malloc)(size_t size);
///------------------------------------------------------------
void* (*realloc)(void *ptr, size_t size);
///------------------------------------------------------------
void* (*lmalloc)(size_t size);
///------------------------------------------------------------
void (*lfree_ptr)(void* ptr);
///------------------------------------------------------------
void (*lfree)(void* ptr);
///------------------------------------------------------------
void* (*lrealloc)(void *ptr, size_t size);
	}st_t;
